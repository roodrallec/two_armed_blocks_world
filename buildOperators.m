function operators = buildOperators(arms, blocks, maxCols, weakArm)
    %% BUILD OPERATORS:
    % Operators:
    % "PICK-UP", A, X 
    % "LEAVE", A, X, C
    % "STACK", A, X, Y 
    % "UNSTACK", A, X, Y, C
    %% POSSIBLE PREDICATES
    % ON-TABLE(domain.blocksMap.label)
    % ON(domain.blocksMap.label, domain.blocksMap.label)
    % CLEAR(domain.blocksMap.label)
    % EMPTY-ARM(arms)
    % HOLDING(domain.blocksMap.label, arms)
    % USED-COLS-NUM(range(1..maxCols))
    % HEAVIER(domain.blocksMap.label, domain.blocksMap.label)
    % LIGHT-BLOCK(domain.blocksMap.label)
    
    function label = labelBuilder(name, arm, block1, block2, cols)
        label = "name=" + name...
              + ";arm=" + arm...
              + ";block1=" + block1...
              + ";block2=" + block2...
              + ";cols=" + cols;
    end

    operators = [];    
    idx = 1;
    % Every operator must use an arm and therefore every arm iteration 
    % generates an operator variation
    for a = 1:length(arms)        
        arm = arms{a};
        % Every operator must operate on a first block
        % so an opeartor is build for each arm block combination
        for b1 = 1:length(blocks)
            block1 = blocks(b1).label;          
            % Some operators depend on the columns too, we apply 
            % those conditions here
            for c = 1:maxCols
                % Here the "PICK-UP" operators are built
                label = labelBuilder("PICK-UP", arm, block1, "", c);
                preConditions = {... 
                    Predicate("ON-TABLE", block1),...
                    Predicate("CLEAR", block1),...                        
                    Predicate("EMPTY-ARM", arm),...
                    Predicate("USED-COLS-NUM", c)...
                };                
                add = {...
                    Predicate("HOLDING", [block1, arm]),...
                    Predicate("USED-COLS-NUM", c-1)...
                };         
                del = {...
                    Predicate("ON-TABLE", block1),...
                    Predicate("CLEAR", block1),...
                    Predicate("EMPTY-ARM", arm)...
                };
                % here we check for the weak arm rule                 
                if (arm == weakArm)
                    preConditions{length(preConditions) + 1} =  Predicate("LIGHT-BLOCK", block1);
                end
                
                operators{idx} = Operator(label, preConditions, add, del);
                idx = idx + 1;
                
                % Here rule 2 is applied                  
                if (c == maxCols)
                    continue
                end                
                
                % Here the "LEAVE" operators are built
                % note that we label it with c+1 to detect operators over
                % the column limit
                label = labelBuilder("LEAVE", arm, block1, "", c+1);
                preConditions = {... 
                    Predicate("HOLDING", [block1, arm]),...
                    Predicate("USED-COLS-NUM", c)...
                };
                add = {...
                    Predicate("ON-TABLE", block1),...                        
                    Predicate("EMPTY-ARM", arm),...
                    Predicate("USED-COLS-NUM", c+1),...
                    Predicate("CLEAR", block1)...
                };
                del = { Predicate("HOLDING", [block1, arm]) };
                operators{idx} = Operator(label, preConditions, add, del);
                idx = idx + 1;            
            end            

            % Some operators operate on a second block, build those here
            for b2 = 1:length(blocks)
                block2 = blocks(b2).label;                
                % Ignore operations of the same block
                if block1 == block2
                    continue
                end
                % Here the "STACK" operators are built
                label = labelBuilder("STACK", arm, block1, block2, "");
                preConditions = {... 
                    Predicate("HOLDING", [block1, arm]),...
                    Predicate("CLEAR", block2),...
                    Predicate("HEAVIER", {block2, block1}),...
                };
                add = {...
                    Predicate("ON", {block1, block2}),...
                    Predicate("EMPTY-ARM", arm),...
                    Predicate("CLEAR", block1)...
                };
                del = {...
                    Predicate("HOLDING", [block1, arm]),...
                    Predicate("CLEAR", block2)
                };                
                operators{idx} = Operator(label, preConditions, add, del);
                idx = idx + 1;
                % Here the "UN-STACK" operators are built
                label = labelBuilder("UN-STACK", arm, block1, block2, "");
                preConditions = {...
                    Predicate("ON", {block1, block2}),...                        
                    Predicate("CLEAR", block1),...
                    Predicate("EMPTY-ARM", arm)...                        
                };
                add = {...
                    Predicate("HOLDING", [block1, arm]),...
                    Predicate("CLEAR", block2)...
                };
                del = {...
                    Predicate("ON", {block1, block2}),...                        
                    Predicate("EMPTY-ARM", arm),...
                    Predicate("CLEAR", block1)...
                };
                % here we check for the weak arm rule                 
                if (arm == weakArm)
                    preConditions{length(preConditions) + 1} =  Predicate("LIGHT-BLOCK", block1);
                end
                operators{idx} = Operator(label, preConditions, add, del);
                idx = idx + 1;                
            end
        end
    end
    operators = [operators{:}];
end

